openapi: 3.0.3
info:
  title: Cable Platform API
  version: 1.0.0
  description: API for cable and harness design pipeline

servers:
  - url: http://localhost:8080
    description: Local development server

security:
  - bearerAuth: []

paths:
  /v1/md/search/connectors:
    get:
      summary: Search connectors by query
      parameters:
        - name: q
          in: query
          schema:
            type: string
          description: Search query for connectors
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectorSummary'

  /v1/md/connector/{mpn}:
    get:
      summary: Get full connector metadata
      parameters:
        - name: mpn
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorMetadata'
        '404':
          description: Connector not found

  /v1/assemblies/draft:
    post:
      summary: Save or update assembly draft
      parameters:
        - name: X-Idempotency-Key
          in: header
          schema:
            type: string
          required: true
          description: Idempotency key for safe retries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssemblyDraft'
      responses:
        '200':
          description: Draft saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssemblyDraftResponse'
        '400':
          description: Invalid request

  /v1/presets/notes-packs:
    get:
      summary: Get available notes packs
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotesPack'

  /v1/assist/locale-colors:
    get:
      summary: Get locale-specific color mappings
      parameters:
        - name: region
          in: query
          schema:
            $ref: '#/components/schemas/Region'
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocaleColors'

  /v1/synthesis/propose:
    post:
      summary: Generate synthesis proposal from draft
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - draft_id
              properties:
                draft_id:
                  type: string
      responses:
        '200':
          description: Synthesis proposal generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SynthesisProposal'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Draft not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/synthesis/accept:
    post:
      summary: Accept synthesis proposal and create assembly
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - proposal_id
              properties:
                proposal_id:
                  type: string
                locks:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Assembly created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - assembly_id
                  - schema_hash
                properties:
                  assembly_id:
                    type: string
                  schema_hash:
                    type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Proposal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/synthesis/recompute:
    post:
      summary: Recompute synthesis proposal with locks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - draft_id
              properties:
                draft_id:
                  type: string
                locks:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Synthesis proposal recomputed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SynthesisProposal'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Draft not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/drc/preview:
    post:
      summary: Preview DRC results for synthesis proposal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SynthesisProposal'
      responses:
        '200':
          description: DRC preview results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRCReport'
        '400':
          description: Invalid proposal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/drc/rulesets:
    get:
      summary: Get available DRC rulesets
      responses:
        '200':
          description: List of available DRC rulesets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRCRulesetsResponse'

  /v1/drc/run:
    post:
      summary: Run DRC on an assembly
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DRCRunRequest'
      responses:
        '200':
          description: DRC report generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRCReport'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Assembly not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/drc/apply-fixes:
    post:
      summary: Apply DRC fixes to an assembly
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DRCApplyFixesRequest'
      responses:
        '200':
          description: Fixes applied successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRCApplyFixesResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Assembly not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/drc/report/{assembly_id}:
    get:
      summary: Get latest DRC report for an assembly
      parameters:
        - name: assembly_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Latest DRC report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRCReport'
        '404':
          description: Assembly or report not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/template-packs:
    get:
      summary: List available template packs
      description: Returns an array of available template packs for rendering assemblies
      responses:
        '200':
          description: List of template packs
          content:
            application/json:
              schema:
                type: object
                required:
                  - template_packs
                properties:
                  template_packs:
                    type: array
                    items:
                      $ref: '#/components/schemas/TemplatePack'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/render:
    post:
      summary: Render an assembly with a template pack
      description: Generates a rendered output (SVG, PDF, or PNG) of an assembly using the specified template pack
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenderRequest'
      responses:
        '200':
          description: Render completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Assembly or template pack not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Rendering error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Region:
      type: string
      enum: [NA, EU, JP, Other]

    ConnectorSummary:
      type: object
      required:
        - mpn
        - family
        - series
        - positions
        - pitch_in
        - termination
      properties:
        mpn:
          type: string
        family:
          type: string
        series:
          type: string
        positions:
          type: integer
          minimum: 1
        pitch_in:
          type: number
          format: float
        termination:
          $ref: '#/components/schemas/TerminationType'

    ConnectorMetadata:
      type: object
      required:
        - mpn
        - family
        - series
        - positions
        - pitch_in
        - termination
        - gender
        - keying
        - compatible_contacts_awg
        - backshell_strain_relief
        - pin1_semantics
      properties:
        mpn:
          type: string
        family:
          type: string
        series:
          type: string
        positions:
          type: integer
          minimum: 1
        pitch_in:
          type: number
          format: float
        termination:
          $ref: '#/components/schemas/TerminationType'
        gender:
          type: string
          enum: [male, female, hermaphroditic]
        keying:
          type: string
        compatible_contacts_awg:
          type: array
          items:
            type: integer
        backshell_strain_relief:
          type: boolean
        pin1_semantics:
          type: string

    TerminationType:
      type: string
      enum: [crimp, idc, ring_lug, solder]

    AssemblyStep1:
      type: object
      required:
        - type
        - length_mm
        - tolerance_mm
        - environment
        - emi
        - locale
        - compliance
        - endA
        - endB
        - notes_pack_id
      properties:
        type:
          type: string
          enum: [ribbon, power_cable, sensor_lead, rf_coax, custom]
        length_mm:
          type: integer
          minimum: 1
        tolerance_mm:
          type: integer
          minimum: 0
          maximum: 100
        environment:
          type: object
          required:
            - temp_min_c
            - temp_max_c
            - flex_class
          properties:
            temp_min_c:
              type: number
              format: float
            temp_max_c:
              type: number
              format: float
            flex_class:
              type: string
              enum: [static, flex, high_flex]
            chemicals:
              type: array
              items:
                type: string
        electrical:
          type: object
          properties:
            system_voltage_v:
              type: number
              format: float
            per_circuit:
              type: array
              items:
                type: object
                required:
                  - circuit
                properties:
                  circuit:
                    type: string
                  current_a:
                    type: number
                    format: float
                  voltage_v:
                    type: number
                    format: float
        emi:
          type: object
          required:
            - shield
            - drain_policy
          properties:
            shield:
              type: string
              enum: [none, foil, braid, foil_braid]
            drain_policy:
              type: string
              enum: [isolated, fold_back, pigtail]
        locale:
          $ref: '#/components/schemas/Region'
        compliance:
          type: object
          properties:
            ipc_class:
              type: string
              enum: ['1', '2', '3']
              default: '2'
            ul94_v0_labels:
              type: boolean
              default: true
            rohs_reach:
              type: boolean
              default: true
        endA:
          $ref: '#/components/schemas/Endpoint'
        endB:
          $ref: '#/components/schemas/Endpoint'
        constraints:
          type: object
          properties:
            stud_size:
              type: string
            board_pitch_inch:
              type: number
              format: float
        must_use:
          type: array
          items:
            type: string
        notes_pack_id:
          type: string
          default: 'STD-NOTES-IPC620-ROHS-REACH'

    Endpoint:
      type: object
      required:
        - selector
        - termination
      properties:
        selector:
          oneOf:
            - type: object
              required:
                - mpn
              properties:
                mpn:
                  type: string
            - type: object
              required:
                - series
                - positions
              properties:
                series:
                  type: string
                positions:
                  type: integer
                  minimum: 1
        termination:
          $ref: '#/components/schemas/TerminationType'

    AssemblyDraft:
      type: object
      required:
        - step
        - payload
        - status
      properties:
        step:
          type: integer
          enum: [1]
        payload:
          $ref: '#/components/schemas/AssemblyStep1'
        status:
          type: string
          enum: [editing, ready_for_step2]

    AssemblyDraftResponse:
      type: object
      required:
        - draft_id
        - status
        - updated_at
      properties:
        draft_id:
          type: string
        status:
          type: string
        updated_at:
          type: string
          format: date-time

    NotesPack:
      type: object
      required:
        - id
        - name
        - description
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string

    LocaleColors:
      type: object
      required:
        - colors
        - notes
      properties:
        colors:
          type: object
          properties:
            L:
              type: string
            N:
              type: string
            PE:
              type: string
        notes:
          type: array
          items:
            type: string

    PartRef:
      type: object
      required:
        - mpn
      properties:
        mpn:
          type: string
        family:
          type: string
        series:
          type: string
        notes:
          type: string

    WirelistRow:
      type: object
      required:
        - circuit
        - conductor
      properties:
        circuit:
          type: string
        conductor:
          type: integer
          minimum: 1
        endA_pin:
          type: string
        endB_pin:
          type: string
        color:
          type: string
        shield:
          type: string
          enum: [none, fold_back, isolated, pigtail]

    BomLine:
      type: object
      required:
        - ref
        - qty
        - role
      properties:
        ref:
          $ref: '#/components/schemas/PartRef'
        qty:
          type: integer
          minimum: 1
        role:
          type: string
          enum: [primary, alternate]
        reason:
          type: string

    SynthesisProposal:
      type: object
      required:
        - proposal_id
        - draft_id
        - cable
        - conductors
        - endpoints
        - shield
        - wirelist
        - bom
        - warnings
        - errors
        - explain
      properties:
        proposal_id:
          type: string
        draft_id:
          type: string
        cable:
          type: object
          required:
            - primary
            - alternates
          properties:
            primary:
              $ref: '#/components/schemas/PartRef'
            alternates:
              type: array
              items:
                $ref: '#/components/schemas/PartRef'
        conductors:
          type: object
          properties:
            count:
              type: integer
              minimum: 1
            awg:
              type: integer
            color_map:
              type: array
              items:
                type: string
            ribbon:
              type: object
              required:
                - pitch_in
                - ways
                - red_stripe
              properties:
                pitch_in:
                  type: number
                  enum: [0.025, 0.05]
                ways:
                  type: integer
                  minimum: 1
                red_stripe:
                  type: boolean
        endpoints:
          type: object
          required:
            - endA
            - endB
          properties:
            endA:
              type: object
              required:
                - connector
                - termination
              properties:
                connector:
                  $ref: '#/components/schemas/PartRef'
                termination:
                  type: string
                  enum: [crimp, idc, ring_lug, solder]
                contacts:
                  type: object
                  required:
                    - primary
                    - alternates
                  properties:
                    primary:
                      $ref: '#/components/schemas/PartRef'
                    alternates:
                      type: array
                      items:
                        $ref: '#/components/schemas/PartRef'
                accessories:
                  type: array
                  items:
                    $ref: '#/components/schemas/PartRef'
            endB:
              type: object
              required:
                - connector
                - termination
              properties:
                connector:
                  $ref: '#/components/schemas/PartRef'
                termination:
                  type: string
                  enum: [crimp, idc, ring_lug, solder]
                contacts:
                  type: object
                  required:
                    - primary
                    - alternates
                  properties:
                    primary:
                      $ref: '#/components/schemas/PartRef'
                    alternates:
                      type: array
                      items:
                        $ref: '#/components/schemas/PartRef'
                accessories:
                  type: array
                  items:
                    $ref: '#/components/schemas/PartRef'
        shield:
          type: object
          required:
            - type
            - drain_policy
          properties:
            type:
              type: string
              enum: [none, foil, braid, foil_braid]
            drain_policy:
              type: string
              enum: [isolated, fold_back, pigtail]
        wirelist:
          type: array
          items:
            $ref: '#/components/schemas/WirelistRow'
        bom:
          type: array
          items:
            $ref: '#/components/schemas/BomLine'
        warnings:
          type: array
          items:
            type: string
        errors:
          type: array
          items:
            type: string
        explain:
          type: array
          items:
            type: string

    DRCRuleset:
      type: object
      required:
        - id
        - version
        - created_at
      properties:
        id:
          type: string
        version:
          type: string
        created_at:
          type: string
          format: date-time
        notes:
          type: string

    DRCRulesetsResponse:
      type: object
      required:
        - rulesets
      properties:
        rulesets:
          type: array
          items:
            $ref: '#/components/schemas/DRCRuleset'

    DRCRunRequest:
      type: object
      required:
        - assembly_id
      properties:
        assembly_id:
          type: string
        ruleset_id:
          type: string
        schema:
          $ref: '#/components/schemas/AssemblySchema'

    DRCApplyFixesRequest:
      type: object
      required:
        - assembly_id
        - fix_ids
      properties:
        assembly_id:
          type: string
        fix_ids:
          type: array
          items:
            type: string
        ruleset_id:
          type: string
        schema:
          $ref: '#/components/schemas/AssemblySchema'

    DRCApplyFixesResponse:
      type: object
      required:
        - assembly_id
        - schema_hash
        - schema
        - drc
      properties:
        assembly_id:
          type: string
        schema_hash:
          type: string
        schema:
          $ref: '#/components/schemas/AssemblySchema'
        drc:
          $ref: '#/components/schemas/DRCReport'

    AssemblySchema:
      type: object
      required:
        - assembly_id
        - schema_hash
        - cable
        - conductors
        - endpoints
        - shield
        - wirelist
        - bom
      properties:
        assembly_id:
          type: string
        schema_hash:
          type: string
        cable:
          type: object
        conductors:
          type: object
        endpoints:
          type: object
        shield:
          type: object
        wirelist:
          type: array
          items:
            type: object
        bom:
          type: array
          items:
            type: object
        labels:
          type: object

    DRCFinding:
      type: object
      required:
        - id
        - severity
        - domain
        - code
        - message
      properties:
        id:
          type: string
        severity:
          type: string
          enum: [error, warning, info]
        domain:
          type: string
          enum: [mechanical, electrical, standards, labeling, consistency]
        code:
          type: string
        message:
          type: string
        where:
          type: string
        refs:
          type: array
          items:
            type: string

    DRCFix:
      type: object
      required:
        - id
        - label
        - description
        - applies_to
        - effect
      properties:
        id:
          type: string
        label:
          type: string
        description:
          type: string
        applies_to:
          type: array
          items:
            type: string
        effect:
          type: string
          enum: [non_destructive, substitution, re_synthesis_required]

    DRCReport:
      type: object
      required:
        - assembly_id
        - ruleset_id
        - version
        - passed
        - errors
        - warnings
        - findings
        - fixes
        - generated_at
      properties:
        assembly_id:
          type: string
        ruleset_id:
          type: string
        version:
          type: string
        passed:
          type: boolean
        errors:
          type: integer
          minimum: 0
        warnings:
          type: integer
          minimum: 0
        findings:
          type: array
          items:
            $ref: '#/components/schemas/DRCFinding'
        fixes:
          type: array
          items:
            $ref: '#/components/schemas/DRCFix'
        generated_at:
          type: string
          format: date-time

    TemplatePack:
      type: object
      required:
        - id
        - version
        - name
        - paper
      properties:
        id:
          type: string
          description: Unique identifier for the template pack
        version:
          type: string
          description: Template pack version
        name:
          type: string
          description: Human-readable name
        paper:
          type: string
          enum: [A3, Letter]
          description: Target paper size
        notes:
          type: string
          description: Optional notes about the template pack

    RenderRequest:
      type: object
      required:
        - assembly_id
        - template_pack_id
      properties:
        assembly_id:
          type: string
          description: ID of the assembly to render
        template_pack_id:
          type: string
          description: ID of the template pack to use
        format:
          type: string
          enum: [svg, pdf, png]
          default: svg
          description: Output format
        inline:
          type: boolean
          default: false
          description: If true, return the rendered output inline in the response
        renderer_kind:
          type: string
          enum: [svg2d, cad]
          default: svg2d
          description: Renderer engine to use

    RenderResponse:
      type: object
      required:
        - render_manifest
      properties:
        render_manifest:
          $ref: '#/components/schemas/RenderManifest'
        url:
          type: string
          description: URL to download the rendered output (if inline is false)
        svg:
          type: string
          description: SVG content (if format is svg and inline is true)

    RenderManifest:
      type: object
      required:
        - rendererVersion
        - templatePackId
        - rendererKind
        - schemaHash
      properties:
        rendererVersion:
          type: string
          description: Version of the renderer used
        templatePackId:
          type: string
          description: Template pack ID used for rendering
        rendererKind:
          type: string
          enum: [svg2d, cad]
          description: Renderer engine used
        schemaHash:
          type: string
          description: Hash of the assembly schema at render time

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
        code:
          type: string
        details:
          type: object
