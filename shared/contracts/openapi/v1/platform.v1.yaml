openapi: 3.0.3
info: { title: Cable Platform API, version: 1.0.0 }
servers: [{ url: http://localhost:8080 }]
paths:
  /health:
    get:
      summary: API health
      responses: { '200': { description: OK } }
  /v1/me:
    get:
      summary: Current user
      security: [{ bearerAuth: [] }]
      responses: { '200': { description: OK } }
  /v1/drc/run:
    post:
      summary: Run DRC
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: CableDesign
              type: object
              required: [id, name, cores]
              properties:
                id:
                  type: string
                name:
                  type: string
                cores:
                  type: integer
                  minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: DRCResult
                type: object
                required: [design_id, findings, severity_summary]
                properties:
                  design_id:
                    type: string
                  findings:
                    type: array
                    items:
                      type: object
                      required: [code, message, severity]
                      properties:
                        code:
                          type: string
                        message:
                          type: string
                        severity:
                          type: string
                          enum: [info, warn, error]
                        path:
                          type: string
                  severity_summary:
                    type: object
                    properties:
                      info:
                        type: integer
                      warn:
                        type: integer
                      error:
                        type: integer
  /admin/users:
    get:
      summary: List admin users
      description: Get paginated list of admin users with optional search
      security: [{ bearerAuth: [] }]
      parameters:
        - name: query
          in: query
          schema:
            type: string
          description: Search query for name or email (case-insensitive substring)
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
          description: Maximum number of users to return
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of users to skip
      responses:
        '200':
          description: List of admin users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUserList'
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/users/{id}/deactivate:
    post:
      summary: Deactivate admin user
      description: Deactivate an admin user account
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID to deactivate
      responses:
        '200':
          description: User deactivated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
        '403':
          description: Forbidden - admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/users/{id}/reactivate:
    post:
      summary: Reactivate admin user
      description: Reactivate a deactivated admin user account
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID to reactivate
      responses:
        '200':
          description: User reactivated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
        '403':
          description: Forbidden - admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/db/stats:
    get:
      summary: Database statistics
      description: Get database connection health and entity counts
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Database statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDbStats'
        '403':
          description: Forbidden - admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AdminUser:
      $ref: '../../schemas/v1/admin-user.schema.json'
    AdminUserList:
      $ref: '../../schemas/v1/admin-user-list.schema.json'
    AdminDbStats:
      $ref: '../../schemas/v1/admin-db-stats.schema.json'
    Error:
      type: object
      required: [error]
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
