# syntax=docker/dockerfile:1.7

ARG NODE_VERSION=20-alpine

FROM node:${NODE_VERSION} AS base
ENV PNPM_HOME="/pnpm"
ENV PNPM_STORE_PATH="/pnpm/store"
ENV PATH="$PNPM_HOME:$PATH"
ENV HUSKY=0
WORKDIR /workspace
RUN apk add --no-cache libc6-compat && corepack enable

FROM base AS deps
COPY pnpm-lock.yaml pnpm-workspace.yaml package.json tsconfig.base.json ./
COPY packages ./packages
COPY shared ./shared
COPY apps/portal/package.json apps/portal/package.json
RUN --mount=type=cache,id=pnpm-store,target=/pnpm/store pnpm fetch --filter portal...

FROM base AS builder
COPY pnpm-lock.yaml pnpm-workspace.yaml package.json tsconfig.base.json ./
COPY packages ./packages
COPY shared ./shared
COPY apps/portal ./apps/portal
RUN --mount=type=cache,id=pnpm-store,target=/pnpm/store pnpm install --frozen-lockfile
RUN pnpm --filter @cable-platform/types... build
RUN pnpm --filter @cable-platform/validation... build
RUN pnpm --filter @cable-platform/contracts... build
RUN pnpm --filter portal... build
RUN pnpm deploy --filter portal --prod /opt/app
RUN rm -rf /opt/app/tests /opt/app/src /opt/app/playwright-report

FROM node:${NODE_VERSION} AS runner
ENV NODE_ENV=production
ENV PORT=3000
WORKDIR /app
COPY --from=builder /opt/app/ ./
EXPOSE 3000
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"
CMD ["node", "build"]
