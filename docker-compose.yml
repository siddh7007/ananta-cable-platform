version: "3.9"
services:
  portal:
    build: { context: ., dockerfile: Dockerfile.portal }
    env_file:
      - .env
      - .env.local
    environment:
      VITE_API_BASE_URL: http://localhost:8080
      BFF_PORTAL_URL: http://bff-portal:4001
      PORT: 3000
    ports: ["5173:3000"]
    depends_on:
      api-gateway:
        condition: service_healthy
      bff-portal:
        condition: service_healthy

  api-gateway:
    build: { context: ., dockerfile: Dockerfile.api-gateway }
    env_file:
      - .env
      - .env.local
    environment:
      PORT: 8080
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      DEV_AUTH_BYPASS: ${DEV_AUTH_BYPASS:-true}
      BFF_PORTAL_URL: http://bff-portal:4001
      RENDERER_SERVICE_URL: http://renderer:5002
    ports: ["8080:8080"]
    healthcheck:
      test:
        - CMD-SHELL
        - >
          node -e "fetch('http://localhost:8080/health').then(r=>process.exit(r.ok ? 0 : 1)).catch(()=>process.exit(1));"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      bff-portal:
        condition: service_healthy
      drc:
        condition: service_healthy
      supabase-db:
        condition: service_healthy
      pg-extra:
        condition: service_healthy
      oracle-xe:
        condition: service_healthy

  bff-portal:
    build: { context: ., dockerfile: Dockerfile.bff-portal }
    env_file:
      - .env
      - .env.local
    environment:
      PORT: 4001
      HOST: 0.0.0.0
      DATABASE_URL: "postgresql://postgres:${SUPABASE_POSTGRES_PASSWORD:-postgres}@supabase-db:5432/${SUPABASE_POSTGRES_DB:-appdb}"
      DRC_SERVICE_URL: "http://drc:8000"
    ports: ["8081:4001"]
    healthcheck:
      test:
        - CMD-SHELL
        - >
          node -e "fetch('http://localhost:4001/health').then(r=>process.exit(r.ok ? 0 : 1)).catch(()=>process.exit(1));"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      supabase-db:
        condition: service_healthy
      pg-extra:
        condition: service_healthy
      drc:
        condition: service_healthy
    restart: unless-stopped

  drc:
    build: { context: ., dockerfile: Dockerfile.drc }
    env_file:
      - .env
      - .env.local
    environment:
      PORT: 8000
      BFF_DATABASE_URL: "postgresql://postgres:${SUPABASE_POSTGRES_PASSWORD:-postgres}@supabase-db:5432/${SUPABASE_POSTGRES_DB:-appdb}"
      MDM_DATABASE_URL: "postgresql://${PG_EXTRA_USER:-postgres}:${PG_EXTRA_PASSWORD:-postgres}@pg-extra:5432/${PG_EXTRA_DB:-extradb}"
    ports: ["8000:8000"]
    healthcheck:
      test:
        - CMD-SHELL
        - >
          python -c "import sys, urllib.request, urllib.error;
          url = 'http://localhost:8000/health';
          try:
              resp = urllib.request.urlopen(url, timeout=5)
          except Exception:
              sys.exit(1)
          else:
              sys.exit(0 if resp.status == 200 else 1)"
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 15s
    depends_on:
      supabase-db:
        condition: service_healthy
      pg-extra:
        condition: service_healthy
    restart: unless-stopped

  otel-collector:
    image: otel/opentelemetry-collector:0.103.1
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - "14317:4317"
      - "14318:4318"

  api-docs:
    image: nginx:alpine
    volumes:
      - ./docs:/usr/share/nginx/html/docs:ro
      - ./shared:/usr/share/nginx/html/shared:ro
    ports: ["8089:80"]
    command: ["nginx", "-g", "daemon off;"]


  # ----- Databases -----
  supabase-db:
    image: postgres:15-alpine
    container_name: supabase-db
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${SUPABASE_POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${SUPABASE_POSTGRES_USER:-postgres}
      POSTGRES_DB: ${SUPABASE_POSTGRES_DB:-appdb}
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \"$${POSTGRES_USER:-postgres}\" -d \"$${POSTGRES_DB:-appdb}\""]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - supabase_pg_data:/var/lib/postgresql/data
      - ./db/supabase/init:/docker-entrypoint-initdb.d:ro

  pg-extra:
    image: postgres:16-alpine
    container_name: pg-extra
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${PG_EXTRA_PASSWORD:-postgres}
      POSTGRES_USER: ${PG_EXTRA_USER:-postgres}
      POSTGRES_DB: ${PG_EXTRA_DB:-extradb}
    ports: ["5442:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \"$${POSTGRES_USER:-postgres}\" -d \"$${POSTGRES_DB:-extradb}\""]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - pg_extra_data:/var/lib/postgresql/data
      - ./db/postgres_extra/init:/docker-entrypoint-initdb.d:ro

  oracle-xe:
    image: gvenzl/oracle-xe:21-slim
    container_name: oracle-xe
    restart: unless-stopped
    environment:
      ORACLE_PASSWORD: ${ORACLE_PASSWORD:-oracle}
      ORACLE_DATABASE: ${ORACLE_DB:-XEPDB1}
      APP_USER: ${ORACLE_APP_USER:-app}
      APP_USER_PASSWORD: ${ORACLE_APP_PASSWORD:-app}
    ports:
      - "1521:1521"   # Oracle Listener
      - "5500:5500"   # EM Express
    healthcheck:
      test: ["CMD", "healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    volumes:
      - oracle_data:/opt/oracle/oradata

volumes:
  supabase_pg_data:
  pg_extra_data:
  oracle_data:
